<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:ui="com.complib.common.ui.*"
					   minWidth="800" minHeight="600" closing="onClosing(event)"
					   creationComplete="initApp();">
	
	<s:states>
		<s:State name="Start"/>
		<s:State name="Test"/>
		<s:State name="Finish"/>
	</s:states>
	
	<fx:Declarations>
		<s:Sequence id="fadeSignalAcknowledgement" duration="1000" target="{signal_ak}">
			<s:Fade id="fadeShow" alphaFrom="0.0" alphaTo="1.0"/>
			<s:Fade id="fadeHide" alphaFrom="1.0" alphaTo="0.0"/>
		</s:Sequence>
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			
			/*----------------*/
			/*---- Import ----*/
			/*----------------*/
			
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import flash.events.Event;
			import flash.events.TimerEvent;
			import flash.utils.Timer;
			
			import mx.formatters.DateFormatter;
			
			/*-------------------*/
			/*---- Constants ----*/
			/*-------------------*/
			
			private const SECOND:Number = 1000;
			private const MINUTE:Number = 60 * SECOND;
			
			private const TIMER_FIRST_SIGNAL_INTERVAL:Number = 15 * SECOND;
			private const TIMER_SIGNAL_DURATION:Number = 5 * SECOND;
			
			private const MIN_RANDOM_INTERVAL:Number = 6;
			private const MAX_RANDOM_INTERVAL:Number = 15;
			
			private const XML_NAME:String = "stroop_results.xml";
			private const XLS_NAME:String = "stroop_results.xls";
			
			private const PYTHON_EXEC_PATH:String = "C:/Python27/python.exe";
			private const PYTHON_CLIENT_PATH:String = "C:/Users/LoÃ¯c/Desktop/SmartCap/client.py";
			
			private const TEXT_LIST_SIGNALS_PATH:String = "./signals.txt";
			
			/*--------------------*/
			/*---- Attributes ----*/
			/*--------------------*/
			
			protected var xls:ExcelFile;
			protected var sheet:Sheet;
			
			private var excelStroopRow:int;
			private var excelSignalsRow:int;
			
			private var xmlResult:String;
			
			private var nbErrorsStroop:int;
			private var nbSignalsSent:int;
			
			private var timerLaunchSignals:Timer;
			private var timerSignalDuration:Timer;
			
			private var nativeProcessStartupInfo:NativeProcessStartupInfo;
			private var process:NativeProcess;
			
			private var CurrentDateTime:Date;
			private var CurrentDF:DateFormatter;
			
			private var pathFolder:String;
			
			/*---------------*/
			/*---- Array ----*/
			/*---------------*/
			
			private var signals:Array; 
			
			/*-----------------*/
			/*---- Methods ----*/
			/*-----------------*/
			
			/*---- Application Methods ----*/
			
			/**
			 * This function is called when the application
			 * is closed and calls xml and xls write methods 
			 */
			private function onClosing(event:Event):void{
				
			}
			
			/**
			 * This function is called when the application 
			 * is launched and initializes variables
			 */
			private function initApp():void {
				this.currentState='Start';
				
				this.nativeProcessStartupInfo = new NativeProcessStartupInfo();
				this.process = new NativeProcess();
				
				this.CurrentDateTime = new Date();
				this.CurrentDF = new DateFormatter();
				this.CurrentDF.formatString = "YYYY/MM/DD HH:NN:SS.QQQ"
				
				this.signals = new Array();
				this.open();
					
				this.initPathFolder();
				this.initXML();
				this.initExcel();
				this.initTimers();
				
				this.addEventListener(KeyboardEvent.KEY_UP, keyHandler);
			}
			
			
			/*---- State Change Methods ----*/
			
			/**
			 * This function is called to reach the
			 * state 'start' of this application
			 */
			private function startTest():void {
				this.currentState='Test';
				
				this.nbSignalsSent = 0;
				this.nbErrorsStroop = 0;
				
				this.focusManager.setFocus(color_test);
				
				this.timerLaunchSignals.start();
			}
			
			/**
			 * This function is called to reach the
			 * state 'finish' of this application
			 */
			private function finishTest():void {
				this.currentState='Finish';
				
				this.timerLaunchSignals.stop();
				this.timerSignalDuration.stop();
				
				this.writeXML();
				this.writeExcel();
			}
			
			
			/*---- Stroop Methods ----*/
			
			/**
			 * This function handle keyboard event
			 * @event : Keyboard event
			 */
			private function keyHandler(event:KeyboardEvent):void {
				this.CurrentDateTime = new Date();
				this.CurrentDF = new DateFormatter();
				this.CurrentDF.formatString = "HH:NN:SS.QQQ"
				var time:String = CurrentDF.format(CurrentDateTime);
				
				xmlResult += "<signal_detected>"+time+"</signal_detected>"+"\n";
				fadeSignalAcknowledgement.end();
				fadeSignalAcknowledgement.play();
				
				if(timerSignalDuration.running) {
					stopSignal(null);
				}
			}
			
			/**
			 * This function handles an answer to the stroop test.
			 * It registers the results.
			 * @event : Event to register
			 */
			private function printMessage(event:Event):void {
				this.CurrentDateTime = new Date();
				this.CurrentDF = new DateFormatter();
				this.CurrentDF.formatString = "HH:NN:SS.QQQ"
				var time:String = CurrentDF.format(CurrentDateTime);
				
				if(buttonToColorUint(event)==color_test.getStyle('color')){
					message.text = "Correct answer";
					xmlResult += "<correct_answer>"+time+"</correct_answer>"+"\n";
					
					// Excel results
					sheet.setCell(excelStroopRow, 5, time);
					sheet.setCell(excelStroopRow, 6, nbErrorsStroop);
					excelStroopRow++;
					
					// Next question
					nbErrorsStroop = 0;
					sheet.setCell(excelStroopRow, 4, time);
					color_test.setStyle('color',generateQuestionColor());
					color_test.text=generateQuestionText();
				}
				else{
					message.text = "Wrong answer";
					xmlResult += "<wrong_answer>"+time+"</wrong_answer>"+"\n";
					
					nbErrorsStroop++;
				}
			}
			
			/**
			 * This function generate a number between 1 to 4;
			 */
			private function generateNumber1to4():Number {
				var low:Number = 1;
				var high:Number= 4;
				var result:Number = Math.floor(Math.random() * (1 + high - low)) + low;
				return result;
			}
			
			/**
			 * This function generate a question color;
			 */
			private function generateQuestionColor():String {
				var num:Number = generateNumber1to4();
				switch(num){
					case 1:
						// Red
						return "#FF0000";
					case 2:
						// Blue
						return "#0000FF";
					case 3:
						// Green
						return "#169C16";
					case 4:
						// Yellow
						return "#F7FE2E";
					default:
						// White
						return "#FFFFFF";
				}
			}
			
			/**
			 * This function generate a question text;
			 */
			private function generateQuestionText():String {
				var num:Number = generateNumber1to4();
				switch(num){
					case 1:
						// Red
						return "Red";
					case 2:
						// Blue
						return "Blue";
					case 3:
						// Green
						return "Green";
					case 4:
						// Yellow
						return "Yellow";
					default:
						// White
						return "White";
				}
			}
			
			/**
			 * 
			 */
			private function buttonToColorUint(event:Event):String {
				switch(event.target.id){
					case "Red":
						return "16711680";
					case "Blue":
						return "255";
					case "Green":
						return "1481750";
					case "Yellow":
						return "16252462";
					default:
						return "#FFFFFF";
				}
				
			}
			
			
			/*---- XML methods ----*/
			
			/**
			 * This function init the pathFolder variable where
			 * the name and the path of the folder are stocked
			 */
			private function initPathFolder():void {
				var time:String = CurrentDF.format(CurrentDateTime);
				var myPattern:RegExp = /\//g;  
				
				time = time.replace(myPattern, "-");
				myPattern = /\./g;
				time = time.replace(myPattern, "-");
				myPattern = /:/g;
				time = time.replace(myPattern, "_");
				
				this.pathFolder = "./Stroop_Task_" + time + "/";
			}
			
			/**
			 * This function init the XML result
			 */
			private function initXML():void {
				this.xmlResult = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+"\n";
			}
			
			/**
			 * This function write into a xml file into the pathFolder
			 */
			private function writeXML():void {
				var file:File = File.desktopDirectory.resolvePath(pathFolder + XML_NAME);
				var stream:FileStream = new FileStream();
				
				stream.open(file, FileMode.WRITE);
				stream.writeUTFBytes(xmlResult);
				stream.close();
			}

			
			/*---- XLS methods ----*/
			
			/**
			 * This method initialize the Excel file for registering data.
			 */
			private function initExcel():void {
				xls = new ExcelFile();
				sheet = new Sheet();
				sheet.resize(160, 12);
				
				sheet.setCell(0, 0, "Today's date:");
				var time:String = CurrentDF.format(CurrentDateTime);
				sheet.setCell(0, 2, time);
				
				sheet.setCell(1, 0, "Signal sent date");
				sheet.setCell(1, 1, "Signal acknowledged date");
				sheet.setCell(1, 2, "Signal id");
				
				sheet.setCell(1, 4, "Stroop test date");
				sheet.setCell(1, 5, "Stroop correct answer date");
				sheet.setCell(1, 6, "Stroop errors");
				
				excelSignalsRow = 2;
				excelStroopRow = 2;
			}
			
			/**
			 * This method writes the Excel file.
			 * Called in the end of the execution.
			 */
			private function writeExcel():void {
				xls.sheets.addItem(sheet);
				
				var bytes:ByteArray = xls.saveToByteArray();
				var stream:FileStream = new FileStream();
				var time:String = CurrentDF.format(CurrentDateTime);
				
				var myPattern:RegExp = /\//g;  
				time = time.replace(myPattern, "-");
				myPattern = /\./g;
				time = time.replace(myPattern, "-");
				myPattern = /:/g;
				time = time.replace(myPattern, "_");
				
				var file:File = File.desktopDirectory.resolvePath(pathFolder + XLS_NAME);
				
				stream.open(file, FileMode.WRITE);
				stream.writeBytes(bytes);
				stream.close();
			}
			
			
			/*---- Timer Methods ----*/
			
			/**
			 * This function initializes the two timers of the application
			 *   - timerLaunchSignals
			 *   - timerSignalDuration
			 */
			private function initTimers(): void {
				timerLaunchSignals = new Timer(TIMER_FIRST_SIGNAL_INTERVAL, 1);
				timerSignalDuration = new Timer(TIMER_SIGNAL_DURATION, 1);
				
				timerLaunchSignals.addEventListener(TimerEvent.TIMER, sendSignal);
				timerSignalDuration.addEventListener(TimerEvent.TIMER, stopSignal);
			}
			
			/**
			 * This function send signal to smart cap and
			 * initalizes the timer signal duration
			 */
			private function sendSignal(evt:TimerEvent):void {
				this.CurrentDateTime = new Date();
				this.CurrentDF = new DateFormatter();
				this.CurrentDF.formatString = "HH:NN:SS.QQQ"
				var time:String = CurrentDF.format(CurrentDateTime);
				
				// Start the signal emitted by the prototype
				startPrototypeSignal();
				
				// Add a line to XML
				xmlResult += "<signal_send>"+time+"</signal_send>"+"\n";
				
				// Add cell date to excel
				sheet.setCell(excelSignalsRow, 0, time);
				
				// Start of the duration signal timer (5sec)
				timerSignalDuration.start();
				
				// Increments number of signals
				nbSignalsSent++;
			}
			
			/**
			 * This function stop the curent signal if the user acknowledge it or
			 * the timer signal duration is finished
			 */
			private function stopSignal(evt:TimerEvent):void {
				this.CurrentDateTime = new Date();
				this.CurrentDF = new DateFormatter();
				this.CurrentDF.formatString = "HH:NN:SS.QQQ"
				var time:String = CurrentDF.format(CurrentDateTime);
				var random:int;
				
				// Stop the signal emitted by the prototype
				stopPrototypeSignal()
				
				// Add a line to XML file
				xmlResult += "<signal_stop>"+time+"</signal_stop>"+"\n";
				
				// End is registered either the signal has been seen or not
				sheet.setCell(excelSignalsRow++, 1, time);
				
				// Checks if the max number of signals is reached
				if(nbSignalsSent >= signals.length) {
					finishTest();
					return;
				}
				
				// Reset of the duration signal timer
				timerSignalDuration.stop();
				timerSignalDuration.reset();
				
				// Reset of the lauch signals timer 
				random = Math.floor(Math.random() * (MAX_RANDOM_INTERVAL - MIN_RANDOM_INTERVAL + 1)) + MIN_RANDOM_INTERVAL;
				timerLaunchSignals = new Timer(random * SECOND, 1);
				timerLaunchSignals.addEventListener(TimerEvent.TIMER, sendSignal);
				timerLaunchSignals.start();
			}
			
			
			/*---- Executable Methods ----*/
			
			/**
			 * This method is used to call a .exe application
			 * to communicate with our prototype.
			 * @path : path of the .exe to execute. 
			 */
			private function runExeFile(path:String, arguments:Vector.<String>):void {
				if(NativeProcess.isSupported){
					// Path to the exec
					var file:File = File.applicationDirectory.resolvePath(path);
					nativeProcessStartupInfo.executable = file;
					
					// Arguments Vector to pass it to the executable file
					nativeProcessStartupInfo.arguments = arguments;
					
					// Force close
					if(process.running) process.exit(true);
					
					// Run the process
					process.start(nativeProcessStartupInfo);
				}
			}
			
			
			/*---- Prototype Methods ----*/
			
			/**
			 * Start a new signal emitted by the prototype with special parameters.
			 */
			private function startPrototypeSignal():void {
				// Register the parameters in the Excel file
				sheet.setCell(excelSignalsRow, 2, signals[nbSignalsSent]);
				
				var arg:Array = signals[nbSignalsSent].split(",");
				
				callPrototypeSignal(arg[0], arg[1], arg[2], arg[3], arg[4], arg[5]);
			}
			
			/**
			 * Stop the signal emitted by the prototype
			 */
			private function stopPrototypeSignal():void {
				callPrototypeSignal("1", "0", "0", "0", "1", "1.0");
			}
			
			/**
			 * Call the prototype with specific parameters
			 * @leds: 1 to 4, number of working leds
			 * @red: 0 to 255
			 * @green: 0 to 255
			 * @blue: 0 to 255
			 * @form: 1 to 4
			 * @speed: In Hertz
			 */
			private function callPrototypeSignal(leds:String, red:String, green:String, blue:String, form:String, speed:String):void {
				var arguments:Vector.<String> = new Vector.<String>();
				
				arguments[0] = PYTHON_CLIENT_PATH;
				arguments[1] = "-L"; arguments[2] = leds;
				arguments[3] = "-r"; arguments[4] = red;
				arguments[5] = "-g"; arguments[6] = green;
				arguments[7] = "-b"; arguments[8] = blue;
				arguments[9] = "-f"; arguments[10] = form;
				arguments[11] = "-v"; arguments[12] = speed;
				
				// Call the .exe
				this.runExeFile(PYTHON_EXEC_PATH, arguments);
			}
			
			
			/*---- File reading ----*/
			
			public function open() : void { 
				try {
					//URL du fichier XML
					var fichierTXT:URLRequest = new URLRequest(TEXT_LIST_SIGNALS_PATH);

					//Chargement du fichier
					var loader:URLLoader = new URLLoader();
					loader.addEventListener(Event.COMPLETE, onLoaded);
					loader.load(fichierTXT);
				} catch (e : Error) {
					trace("Error selecting file :", e.message);
				}
			}
			
			private function onLoaded(e : Event): void {
				signals = e.target.data.split("\n");
			}
			
			
		]]>
	</fx:Script>
	
	<mx:Panel width="100%" height="100%" horizontalAlign="center" layout="horizontal"
			  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="100"
			  title="Stroop Task" verticalAlign="middle">
		
		<mx:VBox>
			<mx:TextArea id="signal_ak" includeIn="Test" visible="true" width="100%" height="200%"
						 alpha="0.0" borderVisible="false" fontSize="28"
						 text="Signal received" textAlign="center"/>
			
			<mx:TextArea id="color_test" includeIn="Test" width="100%" height="100%"
						 borderVisible="false" color="#F7FE2E" contentBackgroundColor="#D8D8D8"
						 editable="false" fontSize="32" text="Blue" textAlign="center"/>
			
			<mx:HBox>
				<mx:Label id="finishLabel" includeIn="Finish" fontSize="26" text="Thank you for your participation." />
				
				<mx:Button id="startButton" includeIn="Start" label="Start the test"
						   click="startTest();" focusEnabled="false"/>
				
				<mx:Button id="Green" includeIn="Test" label="Green" click="printMessage(event)"
						   focusEnabled="false"/>
				
				<mx:Button id="Blue" includeIn="Test" label="Blue" click="printMessage(event)"
						   focusEnabled="false"/>
				
				<mx:Button id="Yellow" includeIn="Test" label="Yellow" click="printMessage(event)"
						   focusEnabled="false"/>
				
				<mx:Button id="Red" includeIn="Test" label="Red" click="printMessage(event)"
						   focusEnabled="false"/>
			</mx:HBox>
			
			<mx:TextArea id="message" includeIn="Test" width="100%" height="100%" 
						 editable="false" text="" textAlign="center" fontSize="14" />
			
		</mx:VBox>
		
	</mx:Panel>
	
</s:WindowedApplication>

