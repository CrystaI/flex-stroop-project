<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:ui="com.complib.common.ui.*"
					   minWidth="800" minHeight="600" closing="onClosing(event)"
					   creationComplete="initApp();">
	
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
		<s:Sequence id="fadeSignalAcknowledgement" duration="1000" target="{signal_ak}">
			<s:Fade id="fadeShow" alphaFrom="0.0" alphaTo="1.0"/>
			<s:Fade id="fadeHide" alphaFrom="1.0" alphaTo="0.0"/>
		</s:Sequence>
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			
			// To get as3xls to work, make sure it is in the /libs folder.
			// In Flash Builder, go to menu Windows > Preferences > General > Workspace > Linked Resources
			// and add the .swc file to the linked resources.
			// the import "import com.as3xls.xls.*;" tend to disappear when you add a new one
			
			/*---- Imports ----*/
			
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import flash.events.Event;
			import flash.events.TimerEvent;
			import flash.utils.Timer;
			
			import mx.formatters.DateFormatter;
			
			/*---- Constants ----*/
			
			private const TIMER_INTERVAL:Number = 15000;
			
			/*---- Atributes ----*/
			
			protected var xls:ExcelFile;
			protected var sheet:Sheet;
			private var xmlResult:String;
			private var excelStroopRow:int;
			private var excelSignalsRow:int;
			
			private var nbErrorsStroop:int;
			
			private var baseSignalTimer:int;
			private var signalTimer:Timer;
			
			[Embed(source="img/arrows_keyboard.png")]
			[Bindable]
			public var img:Class;
			
			private var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
			private var process:NativeProcess = new NativeProcess();
			
			
			/*---- Methods ----*/
			
			// Initialize methods
			
			private function onClosing(event:Event):void{
				this.writeXML();
				this.writeExcel();
			}
			
			private function initApp():void {
				this.addEventListener(KeyboardEvent.KEY_UP, keyHandler);
				this.runExeFile("C:\\Windows\\System32\\notepad.exe");
				xmlResult = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+"\n";
				
				this.initExcel();
				this.initSignalTimer();
			}
			
			
			// Stroop methods
			
			private function keyHandler(event:KeyboardEvent):void {
				var CurrentDateTime:Date = new Date();
				var CurrentDF:DateFormatter = new DateFormatter();
				CurrentDF.formatString = "YYYY/MM/DD HH:NN:SS.QQQ"
				var time:String = CurrentDF.format(CurrentDateTime);
				message.text = "Keypress detected keyCode:"+event.keyCode + " CharCode:" + event.charCode;
				xmlResult += "<signal_detected>"+time+"</signal_detected>"+"\n";
				fadeSignalAcknowledgement.end();
				fadeSignalAcknowledgement.play();
			}
			
			private function generateNumber1to4():Number{
				var low:Number = 1;
				var high:Number= 4;
				var result:Number = Math.floor(Math.random() * (1 + high - low)) + low;
				return result;
			}
			
			private function generateQuestionColor():String{
				var num:Number = generateNumber1to4();
				switch(num){
					case 1:
						// Red
						return "#FF0000";
					case 2:
						// Blue
						return "#0000FF";
					case 3:
						// Green
						return "#169C16";
					case 4:
						// Yellow
						return "#F7FE2E";
					default:
						// White
						return "#FFFFFF";
				}
			}
			
			private function generateQuestionText():String{
				nbErrorsStroop = 0;
				var num:Number = generateNumber1to4();
				switch(num){
					case 1:
						// Red
						return "Red";
					case 2:
						// Blue
						return "Blue";
					case 3:
						// Green
						return "Green";
					case 4:
						// Yellow
						return "Yellow";
					default:
						// White
						return "White";
				}
			}
			
			private function buttonToColorUint(event:Event):String{
				switch(event.target.id){
					case "Red":
						return "16711680";
					case "Blue":
						return "255";
					case "Green":
						return "1481750";
					case "Yellow":
						return "16252462";
					default:
						return "#FFFFFF";
				}
				
			}
			
			
			// Call exe methods
			
			private function runExeFile(path:String):void{
				if(NativeProcess.isSupported){
					var file:File = File.applicationDirectory;
					file = file.resolvePath(path);
					nativeProcessStartupInfo.executable = file;
					process.start(nativeProcessStartupInfo);
				}
				else{
				}
			}
			
			
			// XML methods
			
			private function writeXML():void{
				var CurrentDateTime:Date = new Date();
				var CurrentDF:DateFormatter = new DateFormatter();
				CurrentDF.formatString = "YYYY/MM/DD HH:NN:SS.QQQ"
				var time:String = CurrentDF.format(CurrentDateTime);
				
				var myPattern:RegExp = /\//g;  
				time = time.replace(myPattern, "-");
				myPattern = /\./g;
				time = time.replace(myPattern, "-");
				myPattern = /:/g;
				time = time.replace(myPattern, "_");
				
				var fName:String="./StroopResults"+time+"/xml/stroop_results.xml";//define the name of the folder
				var file:File = File.desktopDirectory.resolvePath(fName);//with "File.desktopDirectory" point the file to the user desktop
				var stream:FileStream = new FileStream();// Opena new fileStream
				
				stream.open(file, FileMode.WRITE);//put the filemode on "write"
				
				stream.writeUTFBytes(xmlResult);//assign the string that we have to write
				stream.close();//close the fileStream
			}
			
			private function printMessage(event:Event):void  {
				var CurrentDateTime:Date = new Date();
				var CurrentDF:DateFormatter = new DateFormatter();
				CurrentDF.formatString = "YYYY/MM/DD HH:NN:SS.QQQ"
				var time:String = CurrentDF.format(CurrentDateTime);
				
				if(buttonToColorUint(event)==color_test.getStyle('color')){
					message.text = "Correct answer";
					xmlResult += "<correct_answer>"+time+"</correct_answer>"+"\n";
					
					// Excel results
					sheet.setCell(excelStroopRow, 4, time);
					sheet.setCell(excelStroopRow, 5, nbErrorsStroop);
					excelStroopRow++;
					
					// Next question
					sheet.setCell(excelStroopRow, 3, time);
					color_test.setStyle('color',generateQuestionColor());
					color_test.text=generateQuestionText();
				}
				else{
					message.text = "Wrong answer";
					xmlResult += "<wrong_answer>"+time+"</wrong_answer>"+"\n";
					
					// Excel results
					nbErrorsStroop++;
				}
			}
			
			
			// Excel methods
			
			private function initExcel():void {
				xls = new ExcelFile();
				sheet = new Sheet();
				sheet.resize(160, 12);
				
				sheet.setCell(0, 0, "Today's date:");
				var CurrentDateTime:Date = new Date();
				var CurrentDF:DateFormatter = new DateFormatter();
				CurrentDF.formatString = "YYYY/MM/DD HH:NN:SS.QQQ"
				var time:String = CurrentDF.format(CurrentDateTime);
				sheet.setCell(0, 2, time);
				
				sheet.setCell(1, 0, "Signal sent date");
				sheet.setCell(1, 1, "Signal acknowledged date");
				
				sheet.setCell(1, 3, "Stroop test date");
				sheet.setCell(1, 4, "Stroop correct answer date");
				sheet.setCell(1, 5, "Stroop errors");
				
				excelSignalsRow = 2;
				excelStroopRow = 2;
			}
			
			private function writeExcel():void {
				xls.sheets.addItem(sheet);
				var bytes:ByteArray = xls.saveToByteArray();
				
				var stream:FileStream = new FileStream();
				var file:File = File.desktopDirectory.resolvePath("data.xls");
				stream.open(file, FileMode.WRITE);
				stream.writeBytes(bytes);
				stream.close();
			}
			
			
			// Timer Methods
			
			private function initSignalTimer(): void {
				signalTimer = new Timer(TIMER_INTERVAL);
				signalTimer.addEventListener(TimerEvent.TIMER, updateSignalTimer);
			}
			
			private function updateSignalTimer(evt:TimerEvent):void {
				// To be completed to call signal on smart cap
			}
			
			private function startSignalTimer():void {
				signalTimer.start();
			}
			
			private function stopSignalTimer():void {
				signalTimer.stop();
				signalTimer.reset();
			}
			
		]]>
	</fx:Script>
	
	<mx:Panel width="100%" height="100%" horizontalAlign="center" layout="horizontal"
			  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="100"
			  title="Stroop Task" verticalAlign="middle">
		
		<mx:VBox>
			
			<mx:TextArea id="signal_ak" visible="true" width="100%" height="200%" alpha="0.0"
						 borderVisible="false" fontSize="30" textAlign="center" 
						 text="Signal acknowledgement received"/>
			
			<mx:TextArea id="color_test" width="100%" height="100%" borderVisible="false"
						 color="#F7FE2E" contentBackgroundColor="#D8D8D8" editable="false"
						 fontSize="25" text="Blue" textAlign="center"/>
			<mx:HBox>
				
				<mx:Button id="Green" label="Green" click="printMessage(event)"/>
				
				<mx:Button id="Blue" label="Blue" click="printMessage(event)"/>
				
				<mx:Button id="Yellow" label="Yellow" click="printMessage(event)"/>
				
				<mx:Button id="Red" label="Red" click="printMessage(event)"/>
				
			</mx:HBox>
			
			<mx:TextArea id="message" width="100%" height="100%" color="#0000FF" 
						 editable="false" text=""/>
			
			<mx:Image id="myImageRaw" source="{img} " width="300"/>
			
		</mx:VBox>
		
	</mx:Panel>
	
</s:WindowedApplication>

